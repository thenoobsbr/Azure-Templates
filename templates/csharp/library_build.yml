parameters:
- name: artifact_name
  type: string
  default: 'artifact'
- name: projects
  type: string
  default: 'src/**/*.csproj'
- name: pool
  type: string
  default: 'Azure Pipelines'
  values:
  - 'Azure Pipelines'
  - 'Self-hosted'
- name: depends_on
  type: object
  default:
  - calculate_sem_version
- name: version
  type: string
  default: $(Build.BuildNumber)
- name: sonar_organization
  type: string
  default: $(SONAR_ORGANIZATION)
- name: sonar_project_key
  type: string
  default: $(SONAR_PROJECTKEY)
- name: sonar_token
  type: string
  default: $(SONAR_TOKEN)
- name: sonar_url
  type: string
  default: https://sonarcloud.io
- name: run_tests
  type: boolean
  default: true
- name: run_sonar
  type: boolean
  default: true

stages:
- stage: build_package
  displayName: 'Package Build'
  pool:
    name: ${{parameters.pool}}
  dependsOn: ${{parameters.depends_on}}
  jobs:
  - job: build
    displayName: 'Build package'
    condition: succeeded()
    variables:
      version: ${{parameters.version}}
    steps:
    - checkout: self
      path: 'project'

    - checkout: 'templates'
      path: 'templates'

    - ${{ if eq(parameters.run_sonar, true) }}:
      - bash: |
          dotnet tool update dotnet-sonarscanner --tool-path tools --ignore-failed-sources
        displayName: Install Sonar Scanner
        name: sonar_install

      - bash: |
          ./tools/dotnet-sonarscanner begin /k:$SONAR_PROJECT_KEY /o:$SONAR_PROJECT_ORGANIZATION /v:$VERSION /d:sonar.token=$SONAR_TOKEN /d:sonar.host.url=$SONAR_URL /d:sonar.dotnet.excludeTestProjects=true /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
        displayName: Begin Sonar Scanner
        name: sonar_begin
        env:
          SONAR_PROJECT_KEY: ${{parameters.sonar_project_key}}
          SONAR_PROJECT_ORGANIZATION: ${{parameters.sonar_organization}}
          SONAR_TOKEN: ${{parameters.sonar_token}}
          SONAR_URL: ${{parameters.sonar_url}}

    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: '$(Pipeline.Workspace)/project/${{parameters.projects}}'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '$(Pipeline.Workspace)/project/${{parameters.projects}}'
        arguments: '--no-restore --configuration Release'

    - ${{ if eq(parameters.run_tests, true) }}:
      - bash: |
          dotnet tool update dotnet-coverage --tool-path tools --ignore-failed-sources
        displayName: Install Coverage
        name: coverage_install

      - bash: |
          SOLUTION=$(ls *.sln | xargs -L1)
          ./tools/dotnet-coverage collect "dotnet test $SOLUTION" -f xml -o "coverage.xml"
        displayName: Run tests with coverage
        name: coverage_run

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura' 
          summaryFileLocation: $(Pipeline.Workspace)/project/coverage.xml
          pathToSources: $(Pipeline.Workspace)/project/src/
        displayName: Publish coverage
    
    - ${{ if eq(parameters.run_sonar, true) }}:
      - bash: |
          ./tools/dotnet-sonarscanner end /d:sonar.token=$SONAR_TOKEN
        displayName: End Sonar Scanner
        name: sonar_end
        env:
          SONAR_TOKEN: ${{parameters.sonar_token}}

    - task: DotNetCoreCLI@2
      displayName: Pack
      inputs:
        command: pack
        packagesToPack: '$(Pipeline.Workspace)/project/${{parameters.projects}}'
        configurationToPack: 'Release'
        versioningScheme: byEnvVar
        versionEnvVar: version
        outputDir: '$(Build.ArtifactStagingDirectory)'
        includesymbols: true

    - task: PublishPipelineArtifact@1
      displayName: Store Application Artifact
      inputs:
        targetPath: '$(System.ArtifactsDirectory)'
        artifact: '${{parameters.artifact_name}}'
