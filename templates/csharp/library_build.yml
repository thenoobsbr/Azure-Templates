parameters:
- name: artifact_name
  type: string
  default: 'artifact'
- name: projects
  type: string
  default: 'src/**/*.csproj'
- name: pool
  type: string
  default: 'Azure Pipelines'
  values:
  - 'Azure Pipelines'
  - 'Self-hosted'
- name: depends_on
  type: object
  default:
  - calculate_sem_version
- name: version
  type: string
  default: $(Build.BuildNumber)
- name: sonar_organization
  type: string
  default: $(SONAR_ORGANIZATION)
- name: sonar_project_key
  type: string
  default: $(SONAR_PROJECTKEY)
- name: sonar_token
  type: string
  default: $(SONAR_TOKEN)
- name: sonar_url
  type: string
  default: https://sonarcloud.io
- name: run_tests
  type: boolean
  default: true
- name: run_sonar
  type: boolean
  default: true

stages:
- stage: build_package
  displayName: 'Package Build'
  pool:
    name: ${{parameters.pool}}
  dependsOn: ${{parameters.depends_on}}
  jobs:
  - job: build
    displayName: 'Build package'
    condition: succeeded()
    variables:
      version: ${{parameters.version}}
    steps:
    - checkout: self
      path: 'project'

    - checkout: 'templates'
      path: 'templates'

    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: '$(Pipeline.Workspace)/project/${{parameters.projects}}'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '$(Pipeline.Workspace)/project/${{parameters.projects}}'
        arguments: '--no-incremental --no-restore --configuration Release'

    - task: DotNetCoreCLI@2
      displayName: Pack
      inputs:
        command: pack
        packagesToPack: '$(Pipeline.Workspace)/project/${{parameters.projects}}'
        configurationToPack: 'Release'
        versioningScheme: byEnvVar
        versionEnvVar: version
        outputDir: '$(Build.ArtifactStagingDirectory)'
        includesymbols: true

    - task: PublishPipelineArtifact@1
      displayName: Store Application Artifact
      inputs:
        targetPath: '$(System.ArtifactsDirectory)'
        artifact: '${{parameters.artifact_name}}'

- ${{ if eq(parameters.run_sonar, true) }}:
  - stage: run_sonar
    displayName: 'Run Sonar'
    pool:
      name: ${{parameters.pool}}
    dependsOn: ${{parameters.depends_on}}
    jobs:
      - job: sonar
        displayName: 'Sonar'
        condition: succeeded()
        variables:
          version: ${{parameters.version}}
        steps:
          - checkout: self
            path: 'project'
          - checkout: 'templates'
            path: 'templates'
          - script: |
              sudo apt-get update
              sudo apt-get install openjdk-17-jdk -y
              JAVA_HOME_CONTENT='export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
              export PATH="$JAVA_HOME/bin:$PATH"'
              
              echo "$JAVA_HOME_CONTENT" | sudo tee /etc/profile.d/java_home.sh > /dev/null
              
              sudo chmod +x /etc/profile.d/java_home.sh
              
              source /etc/profile
            displayName: 'Install Java'

          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'SonarCloud'
              organization: ${{parameters.sonar_organization}}
              scannerMode: 'MSBuild'
              projectKey: ${{parameters.sonar_project_key}}
              projectVersion: '${{parameters.version}}'
              extraProperties: |
                # Additional properties that will be passed to the scanner, 
                # Put one key=value per line, example:
                sonar.exclusions=**/*test*
                sonar.exclusions=**/lib/**
                sonar.coverageReportPaths=$(Pipeline.Workspace)/project/Reports_Coverage/SonarQube.xml

          - task: DotNetCoreCLI@2
            displayName: 'Restore'
            inputs:
              command: 'restore'
              projects: '$(Pipeline.Workspace)/project/*.sln'

          - task: DotNetCoreCLI@2
            displayName: 'Build'
            inputs:
              command: 'build'
              projects: '$(Pipeline.Workspace)/project'
              arguments: '--no-incremental --no-restore --configuration Release'

          - ${{ if eq(parameters.run_tests, true) }}:
            - task: Bash@3
              displayName: Run tests with coverage
              name: coverage_run
              inputs:
                targetType: 'inline'
                workingDirectory: '$(Pipeline.Workspace)/project'
                script: |
                  dotnet test --no-restore --no-build --configuration Release --collect:"XPlat Code Coverage" --settings $(Pipeline.Workspace)/templates/coverlet/coverlet.runsettings --logger trx

            - task: PublishCodeCoverageResults@2
              inputs:
                summaryFileLocation: $(Pipeline.Workspace)/project/test*/*/TestResults/*/coverage.opencover.xml
                pathToSources: $(Pipeline.Workspace)/project/src/
              displayName: Publish coverage

          - task: SonarCloudAnalyze@1
            displayName: 'Run Code Analysis'

          - task: SonarCloudPublish@1
            displayName: 'Publish Quality Gate Result'
          